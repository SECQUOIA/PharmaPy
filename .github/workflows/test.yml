name: PharmaPy CI/CD Pipeline

on:
  push:
    branches: [ master, test-devel, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  # Test different installation methods
  installation-tests:
    name: Test Installation Methods
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        install-method: ['pip-modern', 'pip-legacy', 'setup-develop']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gfortran liblapack-dev libblas-dev
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install gcc
        
    - name: Upgrade pip and install build tools
      run: |
        python -m pip install --upgrade pip setuptools wheel
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Test Modern pip installation
      if: matrix.install-method == 'pip-modern'
      run: |
        pip install -e .
        
    - name: Test Legacy pip installation  
      if: matrix.install-method == 'pip-legacy'
      run: |
        pip install -e . --use-pep517
        
    - name: Test setup.py develop installation
      if: matrix.install-method == 'setup-develop'
      run: |
        python setup.py develop
        
    - name: Verify installation
      run: |
        python -c "import PharmaPy; print('PharmaPy version:', PharmaPy.__version__ if hasattr(PharmaPy, '__version__') else 'dev')"
        python -c "from PharmaPy import Reactors, Streams, Phases; print('Core modules imported successfully')"
        
    - name: Test package metadata
      run: |
        python -c "import pkg_resources; pkg = pkg_resources.get_distribution('PharmaPy'); print('Package name:', pkg.project_name, 'Version:', pkg.version)"

  # Test the actual PharmaPy functionality
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gfortran liblapack-dev libblas-dev
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install gcc
        
    - name: Install dependencies and package
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install -e ".[test]"
        
    - name: Run reactor tests
      run: |
        cd tests/integration
        python reactor_tests.py
        
    - name: Run flowsheet tests
      run: |
        cd tests/Flowsheet  
        python flowsheet_tests.py
        
    - name: Run tests with pytest (if available)
      continue-on-error: true
      run: |
        pip install pytest pytest-cov
        pytest tests/ -v --tb=short
        
  # Test installation scripts
  script-installation-tests:
    name: Test Installation Scripts
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: '3.9'
        channels: conda-forge
        
    - name: Test Windows installation script
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        echo pharmapy-test | InstallOnWindows.bat
        
    - name: Test Unix installation script  
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        chmod +x InstallOnMac.sh
        echo "pharmapy-test" | bash InstallOnMac.sh
        
    - name: Verify script installation
      run: |
        conda activate pharmapy-test
        python -c "import PharmaPy; print('Installation script successful')"

  # Build and distribution tests
  build-tests:
    name: Build and Distribution Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine check-manifest
        
    - name: Check MANIFEST.in
      run: check-manifest
      
    - name: Build source distribution
      run: python -m build --sdist
      
    - name: Build wheel distribution  
      run: python -m build --wheel
      
    - name: Check distributions
      run: twine check dist/*
      
    - name: Test installation from wheel
      run: |
        pip install dist/*.whl
        python -c "import PharmaPy; print('Wheel installation successful')"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-files
        path: dist/
        
  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Check code formatting with black
      continue-on-error: true
      run: black --check PharmaPy/
      
    - name: Check import sorting with isort
      continue-on-error: true
      run: isort --check-only PharmaPy/
      
    - name: Lint with flake8
      continue-on-error: true
      run: flake8 PharmaPy/ --count --show-source --statistics
