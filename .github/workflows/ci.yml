name: PharmaPy CI/CD

on:
  push:
    branches: [ main, master, develop, test-devel ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run tests weekly on Sunday at 3 AM UTC
    - cron: '0 3 * * 0'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
        include:
          # Test with latest Python on Ubuntu
          - os: ubuntu-latest
            python-version: '3.12'
        exclude:
          # Skip some combinations to reduce CI time
          - os: windows-latest
            python-version: '3.12'
          - os: macos-latest
            python-version: '3.12'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest
        activate-environment: pharmapy-ci
        environment-file: environment.yml
        python-version: ${{ matrix.python-version }}
        auto-activate-base: false
        auto-update-conda: true

    - name: Verify conda environment
      shell: bash -l {0}
      run: |
        conda info
        conda list
        python --version
        python -c "import sys; print(sys.executable)"

    - name: Install PharmaPy in development mode
      shell: bash -l {0}
      run: |
        pip install -e .

    - name: Verify PharmaPy installation
      shell: bash -l {0}
      run: |
        python -c "import PharmaPy; print(f'PharmaPy version: {PharmaPy.__version__}')"

    - name: Verify assimulo installation
      shell: bash -l {0}
      run: |
        python -c "import assimulo; print(f'Assimulo version: {assimulo.__version__}')" || echo "Assimulo not available"

    - name: Run unit tests
      shell: bash -l {0}
      run: |
        pytest tests/unit/ -v --tb=short --maxfail=5

    - name: Run integration tests (without slow tests)
      shell: bash -l {0}
      run: |
        pytest tests/integration/ -v --tb=short -m "not slow" --maxfail=3

    - name: Run fast assimulo tests
      shell: bash -l {0}
      run: |
        pytest tests/ -v --tb=short -m "assimulo and not slow" --maxfail=3 || echo "Assimulo tests skipped"

    - name: Run validation script
      shell: bash -l {0}
      run: |
        python validate_local.py

  test-coverage:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest
        activate-environment: pharmapy-ci
        environment-file: environment.yml
        python-version: '3.10'
        auto-activate-base: false

    - name: Install PharmaPy in development mode
      shell: bash -l {0}
      run: |
        pip install -e .

    - name: Run tests with coverage
      shell: bash -l {0}
      run: |
        pytest tests/ --cov=PharmaPy --cov-report=xml --cov-report=html --cov-fail-under=70 -m "not slow"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Archive coverage HTML report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

  test-comprehensive:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[comprehensive]')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest
        activate-environment: pharmapy-ci
        environment-file: environment.yml
        python-version: '3.10'
        auto-activate-base: false

    - name: Install PharmaPy in development mode
      shell: bash -l {0}
      run: |
        pip install -e .

    - name: Run comprehensive tests (including slow tests)
      shell: bash -l {0}
      run: |
        pytest tests/ -v --tb=short --durations=20 --maxfail=10

    - name: Run performance benchmarks
      shell: bash -l {0}
      run: |
        python -c "
        import time
        import PharmaPy
        print('PharmaPy performance check...')
        start = time.time()
        # Add basic performance tests here
        end = time.time()
        print(f'Basic operations completed in {end-start:.2f} seconds')
        "

  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest
        activate-environment: pharmapy-ci
        environment-file: environment.yml
        python-version: '3.10'
        auto-activate-base: false

    - name: Build package
      shell: bash -l {0}
      run: |
        python -m build

    - name: Test installation from built package
      shell: bash -l {0}
      run: |
        pip install dist/*.whl
        python -c "import PharmaPy; print('Package installation successful')"

    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/

  docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest
        activate-environment: pharmapy-ci
        environment-file: environment.yml
        python-version: '3.10'
        auto-activate-base: false

    - name: Install documentation dependencies
      shell: bash -l {0}
      run: |
        conda install sphinx sphinx-rtd-theme
        pip install -e .

    - name: Build documentation
      shell: bash -l {0}
      run: |
        cd doc
        make html || echo "Documentation build failed"

    - name: Archive documentation
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: documentation
        path: doc/_build/html/
